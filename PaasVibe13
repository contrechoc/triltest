
//special script values for TG15
//#define IR_RECEIVE_PIN 14
//SoftwareSerial mySoftwareSerial(A3, A2);// For shirt TG15

//uploaden met liporiders uit

//////////////////TG12 - bootloader minicuore - IR:14 player niet online 

//TG03 - ok -normal bootloader IR:14 - rode player - IR ontvangst een beetje unstable? ontvangt wel

//TG05 - kijk voor start file: speelt verkeerde tracks (soms???) - normal bootloader IR:14 myDFPlayer.play(4);
//TG05 - ok - normal bootloader IR:14 - blauwe player helemaal doorverbonden

//TG06 - old bootloader ;- IR:13; special values SoftwareSerial A3 A2

//TG07 -normal bootloader - IR:14 - volume really low: --- still a problem --- player gaat steeds uit 
//TG07 - - normal bootloader IR:14

//TG09 - ok - normal bootloader IR:13 - player doorverbonden
//TG10 - ok -normal bootloader IR:13 
//TG13 - -special values SoftwareSerial A3 A2 - normal bootloader IR:13 - blauwe player - player een beetje heen en weer voor contact

//TG15 - - special values SoftwareSerial A3 A2 - normal bootloader IR:14  -

//TG16 - ok - old bootloader - - IR:13

// TG20 - ok verkeerde soundtracks - special values SoftwareSerial A3 A2 - normal bootloader IR:14  -


#define IR_RECEIVE_PIN 13
int volume = 17;

#include "Arduino.h"
#include "SoftwareSerial.h"
#include "DFRobotDFPlayerMini.h"

//SoftwareSerial mySoftwareSerial(A3, A2);// For shirt TG15
SoftwareSerial mySoftwareSerial(11, 12); // RX, TX

DFRobotDFPlayerMini myDFPlayer;
void printDetail(uint8_t type, int value);

#if !defined(STR_HELPER)
#define STR_HELPER(x) #x
#define STR(x) STR_HELPER(x)
#endif

#include <IRremote.hpp>

int plays = 0;
static unsigned long timer = millis();
int trackNumber = 0;
int IRsignal = 0;

static unsigned long timerIR = millis() + 10000;
static unsigned long timer2 = millis();
static unsigned long timer3 = millis();
static unsigned long timer4 = millis();

boolean upper = 0;
int divider = 1;
int timeCounter;
int hhh;
int counter = 0;

#if !defined(STR_HELPER)
#define STR_HELPER(x) #x
#define STR(x) STR_HELPER(x)
#endif

void setup()
{

  mySoftwareSerial.begin(9600);
  Serial.begin(115200);

  Serial.println();
  Serial.println(F("DFRobot DFPlayer Mini Demo"));
  Serial.println(F("Initializing DFPlayer ... (May take 3~5 seconds)"));

  if (!myDFPlayer.begin(mySoftwareSerial)) {  //Use softwareSerial to communicate with mp3.
    Serial.println(F("Unable to begin:"));
    Serial.println(F("1.Please recheck the connection!"));
    Serial.println(F("2.Please insert the SD card!"));
    while (true) {
      delay(0); // Code to compatible with ESP8266 watch dog.
    }
  }
  Serial.println(F("DFPlayer Mini online."));

  myDFPlayer.volume(volume-3);  //Set volume value. From 0 to 30

//not TG05
  myDFPlayer.play(1);  //Play the first mp3

  //TG13 - 1 gesnik - sound 1
  //TG13 - 2 welkom
  //TG13 - 3 derde track - sound 3
  //TG13 - 4 ander track - 

//TG05
    //myDFPlayer.play(4);  //Play the first mp3

  //1 gesnik eerste sound
  //2 heipaal tweemaal - tweede sound 
  //3 derde sound
  //4 welcome
  
  trackNumber = 1;
  IRsignal = 0x10;
  plays = 0;
  timerIR = millis() + 20000;

  IrReceiver.begin(IR_RECEIVE_PIN, ENABLE_LED_FEEDBACK);
  Serial.println(("at pin " STR(IR_RECEIVE_PIN)));
}

void loop()
{
  lookATOtherSignals();
  ifNoSignalForToLong();
  vibrationWithTrack();
}

void lookATOtherSignals() {
  if ( plays == 1)
  {
    if (IrReceiver.decode()) {
      IrReceiver.resume(); // Enable receiving of the next value
      delay(100);
      int ir =  IrReceiver.decodedIRData.command;
      delay(100);
       Serial.print("-------------received-------while playing-------------:");
       Serial.println(ir);
      if ( (ir == 0x10) || (ir == 0x11) || (ir == 0x12) || (ir == 0x14))
      {
        if ( ir != IRsignal ) {
          if (ir == 0x10) {
            Serial.println("wanting - start track0 0x10 - welcome");
            trackNumber = 1;
            IRsignal = 0x10;
             myDFPlayer.volume(volume - 5); 
          }
          else if (ir == 0x11) {
            Serial.println("wanting - start track0 0x11 - crying");
            trackNumber = 2;
            IRsignal = 0x11;
             myDFPlayer.volume(volume); 
          }
          else if (ir == 0x12) {
            Serial.println("wanting - start track0 0x12 - exhale");
            trackNumber = 3;
            IRsignal = 0x12;
             myDFPlayer.volume(volume); 
          }
          else if (ir == 0x14) {
            Serial.println("wanting - start track0 0x14 - beats");
            trackNumber = 4;
            IRsignal = 0x14;
             myDFPlayer.volume(volume); 
          }
          myDFPlayer.play(trackNumber);
        }
        else
        {
          //Serial.println("dont allow to start the same track");
        }
      }
    }
  }
}

void printDetail(uint8_t type, int value) {
  switch (type) {
    case TimeOut:
      Serial.println(F("Time Out!"));
      break;
    case WrongStack:
      Serial.println(F("Stack Wrong!"));
      break;
    case DFPlayerCardInserted:
      Serial.println(F("Card Inserted!"));
      break;
    case DFPlayerCardRemoved:
      Serial.println(F("Card Removed!"));
      break;
    case DFPlayerCardOnline:
      Serial.println(F("Card Online!"));
      break;
    case DFPlayerUSBInserted:
      Serial.println("USB Inserted!");
      break;
    case DFPlayerUSBRemoved:
      Serial.println("USB Removed!");
      break;
    case DFPlayerPlayFinished:
      Serial.print(F("Number:"));
      Serial.print(value);
      Serial.println(F(" Play Finished!"));
      plays = 0;
      break;
    case DFPlayerError:
      Serial.print(F("DFPlayerError:"));
      switch (value) {
        case Busy:
          Serial.println(F("Card not found"));
          break;
        case Sleeping:
          Serial.println(F("Sleeping"));
          break;
        case SerialWrongStack:
          Serial.println(F("Get Wrong Stack"));
          break;
        case CheckSumNotMatch:
          Serial.println(F("Check Sum Not Match"));
          break;
        case FileIndexOut:
          Serial.println(F("File Index Out of Bound"));
          break;
        case FileMismatch:
          Serial.println(F("Cannot Find File"));
          break;
        case Advertise:
          Serial.println(F("In Advertise"));
          break;
        default:
          break;
      }
      break;
    default:
      break;
  }
}

void ifNoSignalForToLong() {
  if ( timerIR < millis())
  {
    if (plays == 0) {
        Serial.println("random");
      //getVibe(7, 500, 1); getVibe(5, 500, 1); getVibe(7, 500, 1); getVibe(5, 500, 1);

      int h = random(0, 3);
       myDFPlayer.volume(volume); 
      if ( h == 0)
      {
        trackNumber = 2;
        IRsignal = 0x11;
      } else  if ( h == 1)
      {
        trackNumber = 3;
        IRsignal = 0x12;
      } if ( h == 2)
      {
        trackNumber = 4;
        IRsignal = 0x14;
      }
      myDFPlayer.play(trackNumber);
      plays = 1;
      Serial.print ("track without signal ");
      Serial.println(trackNumber);
    }
    else
    {
      timerIR = millis() + 10000;
    }
  }
}

void vibrationWithTrack() {
  if ( trackNumber == 1) //real soundTrack 4 - welcoming and checking soundfile
  {
    track3(); //track0 behavior
  }
  else if ( trackNumber == 2)
  {
    track2(); //track0 behavior
  }
  else if ( trackNumber == 3)
  {
    track1(); //track0 behavior
    // Serial.println("no vibration");
  }
  else if ( trackNumber == 4)
  {
    track0();
  }
}

void track0() {
  Serial.println("track0");

  if (timer2 < micros()) {
    hhh =  1000000 / 3 ;
    timer = micros() + hhh;
    if ( upper == 1)
    {
      getVibe4(10, 9, 8, 7, 100, 0);
    }
    else
    {
      getVibe4(2, 3, 4, 5, 100, 0);
    }
    timer2 = micros() + 298300 / divider ;
  }

  if (timer3 < micros()) {
    hhh =  1058823 / 3  ;
    timer3 = micros() + hhh;
    getVibe(6, 100, 0);
  }

  if (timer4 < micros()) {
    hhh =  1000000 / 3 ;
    timer4 = micros() + hhh;
    counter++;
    if ( counter % 17 == 0)
    {
      for (int i = 0; i < 20; i++)
      {
        getVibe2(9, 3, 100, 0);
      }
      for (int i = 0; i < 2; i++)
      {
        getVibe2(8, 4, 100, 0);
      }
      for (int i = 0; i < 20; i++)
      {
        getVibe2(5, 7, 100, 0);
      }
    }
  }

  if (random(0, 8) == 0)
    upper = !upper;
    
  int k = random(0, 24);
  if (k == 0)
    getVibe6(6, 7, 8, 9, 3, 4, 300, 0);

}

void track1() {
  Serial.println("track1");
  if (timer2 < micros()) {
    hhh =  (1.05 + sin( millis() / 3000 )) * 2100000 / 6 ;
    timer2 = micros() + hhh;
    getVibe2(2, 10, 250, 0);
  }
  if (timer3 < micros()) {
    hhh =  21000000 / 6 ;
    timer3 = micros() + hhh;
    getVibe2(3, 9, 250, 0);
  }

  //if ((counter++) % 25 == 0)
   // getVibe6(6, 7, 8, 9, 3, 4, 300, 0);
}

void track2() {
  Serial.println("track2");//real track 1
  if (timer3 < micros()) {
    hhh =  random(1000000) ;
    timer3 = micros() + hhh;
    randomVibe(  random(1, 5), 500);
  }

  if (timer2 < micros()) {
    hhh = 500000 +  random(500000) ;
    timer2 = micros() + hhh;
    randomVibe(  random(1, 3), 200);
  }

 // if ((counter++) % 12 == 0)
   // getVibe6(6, 7, 8, 9, 3, 4, 300, 0);

}

void track3() { //welcoming track
  Serial.println("track-welcome");
  getVibe2(2, 10, 250, 0);
  getVibe2(3, 9, 250, 0);
  getVibe2(4, 8, 250, 0);
  getVibe2(5, 7, 250, 0);
  getVibe(6, 250, 0);
  getVibe(6, 250, 0);
}


//-------------------soundPatterns-----------------------

void triller(int which) {
  digitalWrite(which, HIGH);   // turn the LED on (HIGH is the voltage level)
  digitalWrite(which + 1, HIGH);
  delay(5);                       // wait for a second
  digitalWrite(which, LOW);    // turn the LED off by making the voltage LOW
  digitalWrite(which + 1, LOW);
  delay(50);                       // wait for a second
}

void TrilAll() {
  for (int i = 2; i < 10; i++)
    digitalWrite(i, HIGH);

  delay(100);
  for (int i = 2; i < 10; i++)
    digitalWrite(i, LOW);
}

void getVibe(int whichPIN, int whichLength, int addDelay) {
  digitalWrite(whichPIN, HIGH);
  delay(whichLength);
  digitalWrite(whichPIN, LOW);
  if ( addDelay == 1)
    delay(whichLength);
}

void getVibe2(int whichPIN1, int whichPIN2, int whichLength, int addDelay) {
  digitalWrite(whichPIN1, HIGH);
  digitalWrite(whichPIN2, HIGH);
  delay(whichLength);
  digitalWrite(whichPIN1, LOW);
  digitalWrite(whichPIN2, LOW);
  if ( addDelay == 1)
    delay(whichLength);
}

void getVibe4(int whichPIN1, int whichPIN2, int whichPIN3, int whichPIN4, int whichLength, int addDelay) {
  digitalWrite(whichPIN1, HIGH);
  digitalWrite(whichPIN2, HIGH);
  digitalWrite(whichPIN3, HIGH);
  digitalWrite(whichPIN4, HIGH);
  delay(whichLength);
  digitalWrite(whichPIN1, LOW);
  digitalWrite(whichPIN2, LOW);
  digitalWrite(whichPIN3, LOW);
  digitalWrite(whichPIN4, LOW);
  if ( addDelay == 1)
    delay(whichLength);
}

void getVibe5(int whichPIN1, int whichPIN2, int whichPIN3, int whichPIN4, int whichPIN5, int whichLength, int addDelay) {
  digitalWrite(whichPIN1, HIGH);
  digitalWrite(whichPIN2, HIGH);
  digitalWrite(whichPIN3, HIGH);
  digitalWrite(whichPIN4, HIGH);
  digitalWrite(whichPIN5, HIGH);
  delay(whichLength);
  digitalWrite(whichPIN1, LOW);
  digitalWrite(whichPIN2, LOW);
  digitalWrite(whichPIN3, LOW);
  digitalWrite(whichPIN4, LOW);
  digitalWrite(whichPIN5, LOW);
  if ( addDelay == 1)
    delay(whichLength);
}

void getVibe6(int whichPIN1, int whichPIN2, int whichPIN3, int whichPIN4, int whichPIN5, int whichPIN6, int whichLength, int addDelay) {
  digitalWrite(whichPIN1, HIGH);
  digitalWrite(whichPIN2, HIGH);
  digitalWrite(whichPIN3, HIGH);
  digitalWrite(whichPIN4, HIGH);
  digitalWrite(whichPIN5, HIGH);
  digitalWrite(whichPIN6, HIGH);
  delay(whichLength);
  digitalWrite(whichPIN1, LOW);
  digitalWrite(whichPIN2, LOW);
  digitalWrite(whichPIN3, LOW);
  digitalWrite(whichPIN4, LOW);
  digitalWrite(whichPIN5, LOW);
  digitalWrite(whichPIN6, LOW);
  if ( addDelay == 1)
    delay(whichLength);
}

void roundSound(int whichSpeed, int whichDir, int whichLength) {
  if ( whichDir == 0 )
  {
    for (int i = 2; i < 11; i++)
      getVibe( i, whichLength, 0);
    delay(whichSpeed);
  }
  else if ( whichDir == 1 )
  {
    for (int i = 10; i > 1; i--)
      getVibe( i, whichLength, 0);
    delay(whichSpeed);
  }
}

void upDownSound(  int whichDir, int whichLength) {
  if ( whichDir == 0 )
  {
    getVibe2(5, 7, whichLength, 0);
    getVibe2(4, 8, whichLength, 0);
    getVibe( 6, whichLength, 0);
    getVibe2(3, 9, whichLength, 0);
    getVibe2(2, 10, whichLength, 0);
  }
  else if ( whichDir == 1 )
  {
    getVibe2(2, 10, whichLength, 0);
    getVibe2(3, 9, whichLength, 0);
    getVibe( 6, whichLength, 0);
    getVibe2(4, 8, whichLength, 0);
    getVibe2(5, 7, whichLength, 0);
  }
}

void leftRight(  int whichDir, int whichLength) {
  if ( whichDir == 0 )
  {
    getVibe( 2, whichLength, 0);
    getVibe2(3, 4, whichLength, 0);
    getVibe( 5, whichLength, 0);
    getVibe( 6, whichLength, 0);
    getVibe( 7, whichLength, 0);
    getVibe2(8, 9, whichLength, 0);
    getVibe( 10, whichLength, 0);
  }
  else if ( whichDir == 1 )
  {
    getVibe( 10, whichLength, 0);
    getVibe2(8, 9, whichLength, 0);
    getVibe( 7, whichLength, 0);
    getVibe( 6, whichLength, 0);
    getVibe( 5, whichLength, 0);
    getVibe2(3, 4, whichLength, 0);
    getVibe( 2, whichLength, 0);
  }
}

void randomVibe(  int howMany, int whichLength) {
  for (int i = 0; i < howMany; i++)
  {
    getVibe( i, whichLength, 0);
  }
}

void EXINplosion( int whichDir, int whichLength) {
  if ( whichDir == 0 )
  {
    getVibe( 6, whichLength, 0);
    getVibe4( 3, 4, 9, 8, whichLength, 0);
    getVibe4( 2, 5, 7, 10, whichLength, 0);
  }
  else if ( whichDir == 1 )
  {
    getVibe4( 2, 5, 7, 10, whichLength, 0);
    getVibe4( 3, 4, 9, 8, whichLength, 0);
    getVibe( 6, whichLength, 0);
  }
}

void pathVibe( int whichDir, int whichLength) {
  if ( whichDir == 0 )
  {
    getVibe( 2, whichLength, 1);
    getVibe( 3, whichLength, 1);
    getVibe( 6, whichLength, 1);
    getVibe( 8, whichLength, 1);
    getVibe( 7, whichLength, 1);
    getVibe( 5, whichLength, 1);
    getVibe( 6, whichLength, 1);
    getVibe( 9, whichLength, 1);
    getVibe( 10, whichLength, 1);
  }
  else if ( whichDir == 1 )
  {
    getVibe( 10, whichLength, 1);
    getVibe( 9, whichLength, 1);
    getVibe( 6, whichLength, 1);
    getVibe( 5, whichLength, 1);
    getVibe( 7, whichLength, 1);
    getVibe( 8, whichLength, 1);
    getVibe( 6, whichLength, 1);
    getVibe( 3, whichLength, 1);
    getVibe( 2, whichLength, 1);
  }
}

void pattern(int whichDir, int whichLength) {
  if ( whichDir == 0 )
  {
    getVibe5( 3, 4, 6, 9, 8, whichLength, 0);
    getVibe4( 2, 10, 5, 7, whichLength, 0);
  }
  else if ( whichDir == 1 )
  {
    getVibe4( 2, 10, 5, 7, whichLength, 0);
    getVibe5( 3, 4, 6, 9, 8, whichLength, 0);
  }
}
