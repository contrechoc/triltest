
//special script values for TG15
//#define IR_RECEIVE_PIN 14
//SoftwareSerial mySoftwareSerial(A3, A2);// For shirt TG15


#define IR_RECEIVE_PIN 13

#include "Arduino.h"
#include "SoftwareSerial.h"
#include "DFRobotDFPlayerMini.h"

//SoftwareSerial mySoftwareSerial(A3, A2);// For shirt TG15
SoftwareSerial mySoftwareSerial(11, 12); // RX, TX

DFRobotDFPlayerMini myDFPlayer;
void printDetail(uint8_t type, int value);

#if !defined(STR_HELPER)
#define STR_HELPER(x) #x
#define STR(x) STR_HELPER(x)
#endif

#include <IRremote.hpp>

int plays = 0;
static unsigned long timer = millis();
int trackNumber = 0;
int IRsignal = 0;

static unsigned long timerIR = millis() + 10000;
static unsigned long timer2 = millis();
static unsigned long timer3 = millis();

int upper = 0;
int divider = 1;
int timeCounter;

//data first soundtrack
long trackOneTimes[] = {3, 3, 9, 13, 17, 24, 27, 29, 35, 49, 65, 69, 74, 82, 91, 97, 98, 103, 107, 109, 113, 116, 122, 127, 128, 130, 133, 136, 143, 145, 150, 152, 154, 156, 158, 165, 169, 183, 190, 194, 209, 214, 218, 223, 269, 272, 275, 327, 328, 363, 406, 437, 444, 464, 467, 483, 495, 545, 563, 598,  };
int trackCode[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 5, 4, 2, 4, 9, 6, 2, 3, 10, 7, 2, 2, 2, 9, 4, 14, 11, 15, 9, 5, 46, 3, 3, 52, 1, 35, 43, 31, 7, 20, 3, 16, 12, 50, 18, 35, 89 };
//char *myStrings[]  = {"", " ph", " pl", " pll", " p", " p", " d", " gesnik", " stem", " ruis", " p", " fluitje", " hijg", " high baby voice", " hard", " low", " low", " hard", " hard", " low", " hard", " hard", " low", " stem", " p  ", " p  ", " max", " beat", "  minimum", " hard", " low", " p  ", " low", " explosie", " beat", " low", " low", " low fluit", " minimum", " voice", " voice", " klok", " voice", " beat", " quiet ", " voice", " beat start", " end beat", " quieter", " irregular beat ", " voice beat", " rust", " beat ", " quiet", " beat fast    ", " voice", " beat", " after voices", " irregular sounds", " dies out", " "  };

#if !defined(STR_HELPER)
#define STR_HELPER(x) #x
#define STR(x) STR_HELPER(x)
#endif

void setup()
{

  mySoftwareSerial.begin(9600);
  Serial.begin(115200);

  Serial.println();
  Serial.println(F("DFRobot DFPlayer Mini Demo"));
  Serial.println(F("Initializing DFPlayer ... (May take 3~5 seconds)"));

  if (!myDFPlayer.begin(mySoftwareSerial)) {  //Use softwareSerial to communicate with mp3.
    Serial.println(F("Unable to begin:"));
    Serial.println(F("1.Please recheck the connection!"));
    Serial.println(F("2.Please insert the SD card!"));
    while (true) {
      delay(0); // Code to compatible with ESP8266 watch dog.
    }
  }
  Serial.println(F("DFPlayer Mini online."));

  myDFPlayer.volume(17);  //Set volume value. From 0 to 30

  myDFPlayer.play(1);  //Play the first mp3
  trackNumber = 1;
  IRsignal = 0x10;
  plays = 1;

  IrReceiver.begin(IR_RECEIVE_PIN, ENABLE_LED_FEEDBACK);
  Serial.println(("at pin " STR(IR_RECEIVE_PIN)));
}

void loop()
{
  lookATOtherSignals();
  ifNoSignalForToLong();
  vibrationWithTrack();
}

void lookATOtherSignals() {
  if ( plays == 1)
  {
    if (IrReceiver.decode()) {
      IrReceiver.resume(); // Enable receiving of the next value
      delay(100);
      int ir =  IrReceiver.decodedIRData.command;
      delay(100);
     // Serial.print("-------------received-------while playing-------------:");
     // Serial.println(ir);
      if ( (ir == 0x10) || (ir == 0x11) || (ir == 0x12) || (ir == 0x14))
      {
        if ( ir != IRsignal ) {
          if (ir == 0x10) {
            Serial.println("wanting - start track0 0x10 - welcome");
            trackNumber = 1;
            IRsignal = 0x10;
          }
          else if (ir == 0x11) {
            Serial.println("wanting - start track0 0x11 - crying");
            trackNumber = 2;
            IRsignal = 0x11;
          }
          else if (ir == 0x12) {
            Serial.println("wanting - start track0 0x12 - exhale");
            trackNumber = 3;
            IRsignal = 0x12;
          }
          else if (ir == 0x14) {
            Serial.println("wanting - start track0 0x14 - beats");
            trackNumber = 4;
            IRsignal = 0x14;
          }
          myDFPlayer.play(trackNumber);
        }
        else
        {
          //Serial.println("dont allow to start the same track");
        }
      }
    }
  }
}

void printDetail(uint8_t type, int value) {
  switch (type) {
    case TimeOut:
      Serial.println(F("Time Out!"));
      break;
    case WrongStack:
      Serial.println(F("Stack Wrong!"));
      break;
    case DFPlayerCardInserted:
      Serial.println(F("Card Inserted!"));
      break;
    case DFPlayerCardRemoved:
      Serial.println(F("Card Removed!"));
      break;
    case DFPlayerCardOnline:
      Serial.println(F("Card Online!"));
      break;
    case DFPlayerUSBInserted:
      Serial.println("USB Inserted!");
      break;
    case DFPlayerUSBRemoved:
      Serial.println("USB Removed!");
      break;
    case DFPlayerPlayFinished:
      Serial.print(F("Number:"));
      Serial.print(value);
      Serial.println(F(" Play Finished!"));
      plays = 0;
      break;
    case DFPlayerError:
      Serial.print(F("DFPlayerError:"));
      switch (value) {
        case Busy:
          Serial.println(F("Card not found"));
          break;
        case Sleeping:
          Serial.println(F("Sleeping"));
          break;
        case SerialWrongStack:
          Serial.println(F("Get Wrong Stack"));
          break;
        case CheckSumNotMatch:
          Serial.println(F("Check Sum Not Match"));
          break;
        case FileIndexOut:
          Serial.println(F("File Index Out of Bound"));
          break;
        case FileMismatch:
          Serial.println(F("Cannot Find File"));
          break;
        case Advertise:
          Serial.println(F("In Advertise"));
          break;
        default:
          break;
      }
      break;
    default:
      break;
  }
}

void ifNoSignalForToLong() {
  if ( timerIR < millis())
  {
    if (plays == 0) {
      //getVibe(7, 500, 1); getVibe(5, 500, 1); getVibe(7, 500, 1); getVibe(5, 500, 1);

      int h = random(0, 3);
      if ( h == 0)
      {
        trackNumber = 1;
        IRsignal = 0x11;
      } else  if ( h == 1)
      {
        trackNumber = 2;
        IRsignal = 0x10;
      } if ( h == 2)
      {
        trackNumber = 1;
        IRsignal = 0x14;
      }
      myDFPlayer.play(trackNumber);
      plays = 1;
      Serial.print ("track without signal ");
      Serial.println(trackNumber);
    }
    else
    {
      timerIR = millis() + 10000;
    }
  }
}

void vibrationWithTrack() {
  if ( trackNumber == 1) //real soundTrack 1
  {
    track0(); //track0 behavior
  }
  else if ( trackNumber == 2) //real soundTrack 2
  {
    track1(); //track0 behavior
  }
  else if ( trackNumber == 3) //real soundTrack 3
  {
    track2(); //track0 behavior
  }
  else if ( trackNumber == 4) //real soundTrack 4 - welcoming and checking soundfile
  {
    track3(); //track0 behavior
  }
}

void track0() {
  //Serial.println("snik snik track 3--------------------mending!!!!");

  if ( timer3 < micros() ) //overall beat pattern, use divider to regulate beat speed
  {
    if ( upper == 1)
    {
      getVibe2(2, 10, 100, 100);
    }
    else
    {
      getVibe2(7, 5, 100, 100);
    }
    timer3 = micros() + 298300 / divider ;
  }

  if ( timer2 < millis() ) { //local vibration patterns defined on the track appearance, getting data from the arrays

    timer2 = millis() +  ( trackOneTimes[timeCounter ] - trackOneTimes[timeCounter - 1 ]) * 1000;

    Serial.print( timeCounter );
    Serial.print("\t  -  ");
    Serial.print(trackOneTimes[timeCounter ]);
    Serial.print("\t  -  ");
    Serial.print(( trackOneTimes[timeCounter ] - trackOneTimes[timeCounter - 1 ]));
    Serial.print("\t  -  ");
    Serial.print(timer2   ); //totalTimeCOunter
    Serial.print("\t  -  ");
    Serial.print(millis()   );
    Serial.println("\t  -  ");
    //Serial.println(myStrings[timeCounter]);

    timeCounter++;

    switch (timeCounter) {
      case 2:
        pattern( 1,  300);
        upper = 1;
        break;
      case 3:
        pathVibe( 0, 200);
        break;
      case 4:
        EXINplosion( 0, 200);
        break;
      case 5:
        randomVibe( 5, 500);
        break;
      case 6:
        leftRight( 0, 300);
        upper = 0;
        break;
      case 7:
        randomVibe( 5, 500);
        break;
      case 8:
        leftRight( 1, 300);
        break;
      case 9:
        getVibe6(2, 3, 4, 5, 6, 7, 200, 0) ;
        break;
      case 10:
        randomVibe( 5, 500);
        break;
      case 11:
        roundSound(100, 0, 100);
        break;
      case 12:
        roundSound(100, 0, 100);
        upper = 1;
        break;
      case 13:
        roundSound(100, 0, 100);
        break;
      case 14:
        randomVibe( 5, 500);
        break;
      case 15:
        upDownSound(  0,  500) ;
        divider = 3;
        break;
      case 16:
        upDownSound(  1, 200) ;
        upper = 0;
        break;
      case 17:
        randomVibe( 5, 500);
        break;
      case 18:
        randomVibe( 5, 500);
        break;
      case 19:
        randomVibe( 5, 500);
        break;
      case 20:
        randomVibe( 5, 500);
        break;
      case 21:
        roundSound(100, 0, 100);
        upper = 1;
        break;
      case 22:
        roundSound(100, 0, 100);
        break;
      case 23:
        roundSound(100, 0, 100);
        break;
      case 24:
        randomVibe( 5, 500);
        break;
      case 25:
        upDownSound(  0,  500) ;
        upper = 0;
        break;
      case 26:
        upDownSound(  1, 200) ;
        break;
      case 27:
        randomVibe( 5, 500);
        break;
      case 28:
        randomVibe( 5, 500);
        break;
      case 29:
        randomVibe( 5, 500);
        upper = 1;
        break;
      case 30:
        randomVibe( 5, 500);
        break;
      case 31:
        roundSound(100, 0, 100);
        break;
      case 32:
        roundSound(100, 0, 100);
        break;
      case 33:
        roundSound(100, 0, 100);
        break;
      case 34:
        randomVibe( 5, 500);
        upper = 1;
        break;
      case 35:
        upDownSound(  0,  500) ;
        break;
      case 36:
        upDownSound(  1, 200) ;
        break;
      case 37:
        randomVibe( 5, 500);
        break;
      case 38:
        randomVibe( 5, 500);
        divider = 1;
        break;
      case 39:
        randomVibe( 5, 500);
        break;
      case 40:
        randomVibe( 5, 500);
        upper = 0;
        break;
      case 41:
        roundSound(100, 0, 100);
        break;
      case 42:
        roundSound(100, 0, 100);
        break;
      case 43:
        roundSound(100, 0, 100);
        break;
      case 44:
        randomVibe( 5, 500);
        divider = 2;
        break;
      case 45:
        upDownSound(  0,  500) ;
        break;
      case 46:
        upDownSound(  1, 200) ;
        break;
      case 47:
        randomVibe( 5, 500);
        break;
      case 48:
        randomVibe( 5, 500);
        break;
      case 49:
        randomVibe( 5, 500);
        divider = 1;
        break;
      case 50:
        randomVibe( 5, 500);
        upper = 1;
        break;
      case 51:
        roundSound(100, 0, 100);
        divider = 3;
        break;
      case 52:
        roundSound(100, 0, 100);
        divider = 1;
        break;
      case 53:
        roundSound(100, 0, 100);
        break;
      case 54:
        randomVibe( 5, 500);
        break;
      case 55:
        upDownSound(  0,  500) ;
        break;
      case 56:
        upDownSound(  1, 200) ;
        divider = 3;
        break;
      case 57:
        randomVibe( 5, 500);
        break;
      case 58:
        randomVibe( 5, 500);
        divider = 2;
        break;
      case 59:
        randomVibe( 5, 500);
        break;
      case 60:
        randomVibe( 5, 500);
        break;
      default:
        randomVibe( 5, 500);
        break;
    }
  }
}

void track1() {
  //Serial.println("exhale track 3--------------------mending!!!!");
  track0();
}

void track3() {
  //Serial.println("exhale track 3--------------------mending!!!!");
   track0();
}

void track2() { //welcoming track
  //Serial.println("welcoming track 3--------------------mending!!!!");
  getVibe2(2, 10, 250, 0);
  getVibe2(3, 9, 250, 0);
  getVibe2(4, 8, 250, 0);
  getVibe2(5, 7, 250, 0);
  getVibe(6, 250, 0);
  getVibe(6, 250, 0);
}


//-------------------soundPatterns-----------------------

void triller(int which) {
  digitalWrite(which, HIGH);   // turn the LED on (HIGH is the voltage level)
  digitalWrite(which + 1, HIGH);
  delay(5);                       // wait for a second
  digitalWrite(which, LOW);    // turn the LED off by making the voltage LOW
  digitalWrite(which + 1, LOW);
  delay(50);                       // wait for a second
}

void TrilAll() {
  for (int i = 2; i < 10; i++)
    digitalWrite(i, HIGH);

  delay(100);
  for (int i = 2; i < 10; i++)
    digitalWrite(i, LOW);
}

void getVibe(int whichPIN, int whichLength, int addDelay) {
  digitalWrite(whichPIN, HIGH);
  delay(whichLength);
  digitalWrite(whichPIN, LOW);
  if ( addDelay == 1)
    delay(whichLength);
}

void getVibe2(int whichPIN1, int whichPIN2, int whichLength, int addDelay) {
  digitalWrite(whichPIN1, HIGH);
  digitalWrite(whichPIN2, HIGH);
  delay(whichLength);
  digitalWrite(whichPIN1, LOW);
  digitalWrite(whichPIN2, LOW);
  if ( addDelay == 1)
    delay(whichLength);
}

void getVibe4(int whichPIN1, int whichPIN2, int whichPIN3, int whichPIN4, int whichLength, int addDelay) {
  digitalWrite(whichPIN1, HIGH);
  digitalWrite(whichPIN2, HIGH);
  digitalWrite(whichPIN3, HIGH);
  digitalWrite(whichPIN4, HIGH);
  delay(whichLength);
  digitalWrite(whichPIN1, LOW);
  digitalWrite(whichPIN2, LOW);
  digitalWrite(whichPIN3, LOW);
  digitalWrite(whichPIN4, LOW);
  if ( addDelay == 1)
    delay(whichLength);
}

void getVibe5(int whichPIN1, int whichPIN2, int whichPIN3, int whichPIN4, int whichPIN5, int whichLength, int addDelay) {
  digitalWrite(whichPIN1, HIGH);
  digitalWrite(whichPIN2, HIGH);
  digitalWrite(whichPIN3, HIGH);
  digitalWrite(whichPIN4, HIGH);
  digitalWrite(whichPIN5, HIGH);
  delay(whichLength);
  digitalWrite(whichPIN1, LOW);
  digitalWrite(whichPIN2, LOW);
  digitalWrite(whichPIN3, LOW);
  digitalWrite(whichPIN4, LOW);
  digitalWrite(whichPIN5, LOW);
  if ( addDelay == 1)
    delay(whichLength);
}

void getVibe6(int whichPIN1, int whichPIN2, int whichPIN3, int whichPIN4, int whichPIN5, int whichPIN6, int whichLength, int addDelay) {
  digitalWrite(whichPIN1, HIGH);
  digitalWrite(whichPIN2, HIGH);
  digitalWrite(whichPIN3, HIGH);
  digitalWrite(whichPIN4, HIGH);
  digitalWrite(whichPIN5, HIGH);
  digitalWrite(whichPIN6, HIGH);
  delay(whichLength);
  digitalWrite(whichPIN1, LOW);
  digitalWrite(whichPIN2, LOW);
  digitalWrite(whichPIN3, LOW);
  digitalWrite(whichPIN4, LOW);
  digitalWrite(whichPIN5, LOW);
  digitalWrite(whichPIN6, LOW);
  if ( addDelay == 1)
    delay(whichLength);
}

void roundSound(int whichSpeed, int whichDir, int whichLength) {
  if ( whichDir == 0 )
  {
    for (int i = 2; i < 11; i++)
      getVibe( i, whichLength, 0);
    delay(whichSpeed);
  }
  else if ( whichDir == 1 )
  {
    for (int i = 10; i > 1; i--)
      getVibe( i, whichLength, 0);
    delay(whichSpeed);
  }
}

void upDownSound(  int whichDir, int whichLength) {
  if ( whichDir == 0 )
  {
    getVibe2(5, 7, whichLength, 0);
    getVibe2(4, 8, whichLength, 0);
    getVibe( 6, whichLength, 0);
    getVibe2(3, 9, whichLength, 0);
    getVibe2(2, 10, whichLength, 0);
  }
  else if ( whichDir == 1 )
  {
    getVibe2(2, 10, whichLength, 0);
    getVibe2(3, 9, whichLength, 0);
    getVibe( 6, whichLength, 0);
    getVibe2(4, 8, whichLength, 0);
    getVibe2(5, 7, whichLength, 0);
  }
}

void leftRight(  int whichDir, int whichLength) {
  if ( whichDir == 0 )
  {
    getVibe( 2, whichLength, 0);
    getVibe2(3, 4, whichLength, 0);
    getVibe( 5, whichLength, 0);
    getVibe( 6, whichLength, 0);
    getVibe( 7, whichLength, 0);
    getVibe2(8, 9, whichLength, 0);
    getVibe( 10, whichLength, 0);
  }
  else if ( whichDir == 1 )
  {
    getVibe( 10, whichLength, 0);
    getVibe2(8, 9, whichLength, 0);
    getVibe( 7, whichLength, 0);
    getVibe( 6, whichLength, 0);
    getVibe( 5, whichLength, 0);
    getVibe2(3, 4, whichLength, 0);
    getVibe( 2, whichLength, 0);
  }
}

void randomVibe(  int howMany, int whichLength) {
  for (int i = 0; i < howMany; i++)
  {
    getVibe( i, whichLength, 0);
  }
}

void EXINplosion( int whichDir, int whichLength) {
  if ( whichDir == 0 )
  {
    getVibe( 6, whichLength, 0);
    getVibe4( 3, 4, 9, 8, whichLength, 0);
    getVibe4( 2, 5, 7, 10, whichLength, 0);
  }
  else if ( whichDir == 1 )
  {
    getVibe4( 2, 5, 7, 10, whichLength, 0);
    getVibe4( 3, 4, 9, 8, whichLength, 0);
    getVibe( 6, whichLength, 0);
  }
}

void pathVibe( int whichDir, int whichLength) {
  if ( whichDir == 0 )
  {
    getVibe( 2, whichLength, 1);
    getVibe( 3, whichLength, 1);
    getVibe( 6, whichLength, 1);
    getVibe( 8, whichLength, 1);
    getVibe( 7, whichLength, 1);
    getVibe( 5, whichLength, 1);
    getVibe( 6, whichLength, 1);
    getVibe( 9, whichLength, 1);
    getVibe( 10, whichLength, 1);
  }
  else if ( whichDir == 1 )
  {
    getVibe( 10, whichLength, 1);
    getVibe( 9, whichLength, 1);
    getVibe( 6, whichLength, 1);
    getVibe( 5, whichLength, 1);
    getVibe( 7, whichLength, 1);
    getVibe( 8, whichLength, 1);
    getVibe( 6, whichLength, 1);
    getVibe( 3, whichLength, 1);
    getVibe( 2, whichLength, 1);
  }
}

void pattern(int whichDir, int whichLength) {
  if ( whichDir == 0 )
  {
    getVibe5( 3, 4, 6, 9, 8, whichLength, 0);
    getVibe4( 2, 10, 5, 7, whichLength, 0);
  }
  else if ( whichDir == 1 )
  {
    getVibe4( 2, 10, 5, 7, whichLength, 0);
    getVibe5( 3, 4, 6, 9, 8, whichLength, 0);
  }
}
