/***************************************************
  DFPlayer - A Mini MP3 Player For Arduino
  <https://www.dfrobot.com/product-1121.html>

 ***************************************************
  This example shows the all the function of library for DFPlayer.

  Created 2016-12-07
  By [Angelo qiao](Angelo.qiao@dfrobot.com)

  GNU Lesser General Public License.
  See <http://www.gnu.org/licenses/> for details.
  All above must be included in any redistribution
 ****************************************************/

/***********Notice and Trouble shooting***************
  1.Connection and Diagram can be found here
  <https://www.dfrobot.com/wiki/index.php/DFPlayer_Mini_SKU:DFR0299#Connection_Diagram>
  2.This code is tested on Arduino Uno, Leonardo, Mega boards.
 ****************************************************/

#include "Arduino.h"
#include "SoftwareSerial.h"
#include "DFRobotDFPlayerMini.h"

//#define DECODE_DENON        // Includes Sharp
//#define DECODE_JVC
//#define DECODE_KASEIKYO
//#define DECODE_PANASONIC    // the same as DECODE_KASEIKYO
//#define DECODE_LG
#define DECODE_NEC          // Includes Apple and Onkyo
//#define DECODE_SAMSUNG
//#define DECODE_SONY
//#define DECODE_RC5
//#define DECODE_RC6

//#define DECODE_BOSEWAVE
//#define DECODE_LEGO_PF
//#define DECODE_MAGIQUEST
//#define DECODE_WHYNTER

//#define DECODE_DISTANCE     // universal decoder for pulse width or pulse distance protocols
//#define DECODE_HASH         // special decoder for all protocols

//#define DEBUG // Activate this for lots of lovely debug output from the decoders.
//#define INFO                // To see valuable informations from universal decoder for pulse width or pulse distance protocols

#include <Arduino.h>

/*
   Define macros for input and output pin etc.
*/
#include "PinDefinitionsAndMore.h"

#include <IRremote.hpp>

SoftwareSerial mySoftwareSerial(11,12); // RX, TX
DFRobotDFPlayerMini myDFPlayer;
void printDetail(uint8_t type, int value);

int plays = 0;
int h;

static unsigned long timer = micros();
static unsigned long timer2 = micros();

int counter;
int trackNumber = 8;

void setup()
{

  pinMode(7, OUTPUT);
  pinMode(8, OUTPUT);
  digitalWrite(7, LOW);

  pinMode(5, OUTPUT);
  pinMode(6, OUTPUT);
  digitalWrite(5, LOW);

  mySoftwareSerial.begin(9600);
  Serial.begin(115200);

  Serial.println();
  Serial.println(F("DFRobot DFPlayer Mini Demo"));
  Serial.println(F("Initializing DFPlayer ... (May take 3~5 seconds)"));

  if (!myDFPlayer.begin(mySoftwareSerial)) {  //Use softwareSerial to communicate with mp3.
    Serial.println(F("Unable to begin:"));
    Serial.println(F("1.Please recheck the connection!"));
    Serial.println(F("2.Please insert the SD card!"));
    while (true);
  }
  Serial.println(F("DFPlayer Mini online."));

  myDFPlayer.setTimeOut(500); //Set serial communictaion time out 500ms

  //----Set volume----
  myDFPlayer.volume(20);  //Set volume value (0~30).
  myDFPlayer.volumeUp(); //Volume Up
  myDFPlayer.volumeDown(); //Volume Down

  //----Set different EQ----
  myDFPlayer.EQ(DFPLAYER_EQ_NORMAL);
    myDFPlayer.outputDevice(DFPLAYER_DEVICE_SD);
    
  //  myDFPlayer.EQ(DFPLAYER_EQ_POP);
  //  myDFPlayer.EQ(DFPLAYER_EQ_ROCK);
  //  myDFPlayer.EQ(DFPLAYER_EQ_JAZZ);
  //  myDFPlayer.EQ(DFPLAYER_EQ_CLASSIC);
  //  myDFPlayer.EQ(DFPLAYER_EQ_BASS);

  //----Set device we use SD as default----
  //  myDFPlayer.outputDevice(DFPLAYER_DEVICE_U_DISK);
  myDFPlayer.outputDevice(DFPLAYER_DEVICE_SD);
  //  myDFPlayer.outputDevice(DFPLAYER_DEVICE_AUX);
  //  myDFPlayer.outputDevice(DFPLAYER_DEVICE_SLEEP);
  //  myDFPlayer.outputDevice(DFPLAYER_DEVICE_FLASH);

  //----Mp3 control----
  //  myDFPlayer.sleep();     //sleep
  //  myDFPlayer.reset();     //Reset the module
  //  myDFPlayer.enableDAC();  //Enable On-chip DAC
  //  myDFPlayer.disableDAC();  //Disable On-chip DAC
  //  myDFPlayer.outputSetting(true, 15); //output setting, enable the output and set the gain to 15
  /*
    //----Mp3 play----
    myDFPlayer.next();  //Play next mp3
    delay(1000);
    myDFPlayer.previous();  //Play previous mp3
    delay(1000);
    myDFPlayer.play(1);  //Play the first mp3
    delay(1000);
    myDFPlayer.loop(1);  //Loop the first mp3
    delay(1000);
    myDFPlayer.pause();  //pause the mp3
    delay(1000);
    myDFPlayer.start();  //start the mp3 from the pause
    delay(1000);
    myDFPlayer.playFolder(15, 4);  //play specific mp3 in SD:/15/004.mp3; Folder Name(1~99); File Name(1~255)
    delay(1000);
    myDFPlayer.enableLoopAll(); //loop all mp3 files.
    delay(1000);
    myDFPlayer.disableLoopAll(); //stop loop all mp3 files.
    delay(1000);
    myDFPlayer.playMp3Folder(4); //play specific mp3 in SD:/MP3/0004.mp3; File Name(0~65535)
    delay(1000);
    myDFPlayer.advertise(3); //advertise specific mp3 in SD:/ADVERT/0003.mp3; File Name(0~65535)
    delay(1000);
    myDFPlayer.stopAdvertise(); //stop advertise
    delay(1000);
    myDFPlayer.playLargeFolder(2, 999); //play specific mp3 in SD:/02/004.mp3; Folder Name(1~10); File Name(1~1000)
    delay(1000);
    myDFPlayer.loopFolder(5); //loop all mp3 files in folder SD:/05.
    delay(1000);
    myDFPlayer.randomAll(); //Random play all the mp3.
    delay(1000);
    myDFPlayer.enableLoop(); //enable loop.
    delay(1000);
    myDFPlayer.disableLoop(); //disable loop.
    delay(1000);
  */
  //----Read imformation----
  Serial.println(myDFPlayer.readState()); //read mp3 state
  Serial.println(myDFPlayer.readVolume()); //read current volume
  Serial.println(myDFPlayer.readEQ()); //read EQ setting
  Serial.println(myDFPlayer.readFileCounts()); //read all file counts in SD card
  Serial.println(myDFPlayer.readCurrentFileNumber()); //read current play file number
  Serial.println(myDFPlayer.readFileCountsInFolder(3)); //read file counts in folder SD:/03

  IrReceiver.begin(IR_RECEIVE_PIN, ENABLE_LED_FEEDBACK);

  Serial.print(F("Ready to receive IR signals of protocols: "));
  printActiveIRProtocols(&Serial);
  Serial.println(F("at pin " STR(IR_RECEIVE_PIN)));

  //myDFPlayer.play(0);
}

void loop()
{

  if (plays == 0)
  {
    if (IrReceiver.decode()) {

      // Print a short summary of received data
      IrReceiver.printIRResultShort(&Serial);
      if (IrReceiver.decodedIRData.protocol == UNKNOWN) {
        // We have an unknown protocol here, print more info
        //  IrReceiver.printIRResultRawFormatted(&Serial, true);
      }
      Serial.println("---");

      /*
         !!!Important!!! Enable receiving of the next value,
         since receiving has stopped after the end of the current received data packet.
      */
      IrReceiver.resume(); // Enable receiving of the next value

      /*
         Finally, check the received data and perform actions according to the received command
      */
      int ir =  IrReceiver.decodedIRData.command;
      Serial.println(ir);

      if (ir == 0x11) {
        Serial.println("start track8");
        myDFPlayer.play(8);
        plays = 1;
        delay (500);
        timer = millis();
        trackNumber = 8;

      } else if (ir == 0x10) {
        Serial.println("start track7");
        myDFPlayer.play(7);
        plays = 1;
        delay (250);
        timer = millis();
        trackNumber = 7;
      }
      else if (ir == 0x12) {
        Serial.println("start track7");
        myDFPlayer.play(11);
        plays = 1;
        delay (500);
        timer = millis();
        trackNumber = 11;
      }
       else if (ir == 0x14) {
        Serial.println("start track1");
        myDFPlayer.play(1);
        plays = 1;
        delay (500);
        timer = millis();
        trackNumber = 1;
      }
    }
  }

  if (plays == 1)
    if ( trackNumber == 8)
    {
      if ( timer2 < micros() ) {
        digitalWrite(8, !digitalRead(8));
        digitalWrite(6, HIGH);
        delayMicroseconds(10);
        digitalWrite(6, LOW);

        timer2 = micros() + 298300 / 2;

      }
    } else if ( trackNumber == 7)
    {
      if ( timer2 < micros() ) {

        digitalWrite(8, !digitalRead(8));
        digitalWrite(6, HIGH);
        delayMicroseconds(10);
        digitalWrite(6, LOW);

        timer2 = micros() + 210000  ;
      }

    }
    else if ( trackNumber == 11)
    {
      if ( timer2 < micros() ) {

        digitalWrite(8, !digitalRead(8));
        digitalWrite(6, HIGH);
        delayMicroseconds(10);
        digitalWrite(6, LOW);

        timer2 = micros() + 298300  ;
      }

    } else if ( trackNumber == 1)
    {
      if ( timer2 < micros() ) {

        //digitalWrite(8, !digitalRead(8));
        digitalWrite(8, HIGH);
        digitalWrite(6, HIGH);
        delayMicroseconds(10);
        digitalWrite(6, LOW);
        digitalWrite(8, LOW);

        timer2 = micros() + 20000 + random(0,298300)  ;
      }

    }


  if (myDFPlayer.available()) {
    printDetail(myDFPlayer.readType(), myDFPlayer.read()); //Print the detail message from DFPlayer to handle different errors and states.
  }

}

void printDetail(uint8_t type, int value) {
  switch (type) {
    case TimeOut:
      Serial.println(F("Time Out!"));
      break;
    case WrongStack:
      Serial.println(F("Stack Wrong!"));
      break;
    case DFPlayerCardInserted:
      Serial.println(F("Card Inserted!"));
      break;
    case DFPlayerCardRemoved:
      Serial.println(F("Card Removed!"));
      break;
    case DFPlayerCardOnline:
      Serial.println(F("Card Online!"));
      break;
    case DFPlayerUSBInserted:
      Serial.println("USB Inserted!");
      break;
    case DFPlayerUSBRemoved:
      Serial.println("USB Removed!");
      break;
    case DFPlayerPlayFinished:
      Serial.print(F("Number:"));
      Serial.print(value);
      Serial.println(F(" Play Finished!"));
      plays = 0;
      delay(2000);
      break;
    case DFPlayerError:
      Serial.print(F("DFPlayerError:"));
      switch (value) {
        case Busy:
          Serial.println(F("Card not found"));
          break;
        case Sleeping:
          Serial.println(F("Sleeping"));
          break;
        case SerialWrongStack:
          Serial.println(F("Get Wrong Stack"));
          break;
        case CheckSumNotMatch:
          Serial.println(F("Check Sum Not Match"));
          break;
        case FileIndexOut:
          Serial.println(F("File Index Out of Bound"));
          break;
        case FileMismatch:
          Serial.println(F("Cannot Find File"));
          break;
        case Advertise:
          Serial.println(F("In Advertise"));
          break;
        default:
          break;
      }
      break;
    default:
      break;
  }

}
